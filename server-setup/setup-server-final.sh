#!/bin/bash

# Script de configuration du serveur de mise √† jour Karlog (VERSION FINALE CORRIG√âE)
# Port 3001 et HTTP simple - Syntaxe nginx corrig√©e

set -e

echo "üöÄ Configuration du serveur de mise √† jour Karlog (Port 3001 - Version corrig√©e)..."

# Variables
PORT="3001"
WEBROOT="/var/www/karlog-updates"
NGINX_CONF="/etc/nginx/sites-available/karlog-updates"
USER="www-data"
SERVER_IP="91.108.122.35"

# V√©rification des privil√®ges root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå Ce script doit √™tre ex√©cut√© en tant que root" 
   exit 1
fi

# V√©rification si le port est libre
if netstat -tuln | grep -q ":$PORT "; then
    echo "‚ùå Le port $PORT est d√©j√† utilis√© !"
    echo "Ports actuellement utilis√©s :"
    netstat -tuln | grep LISTEN
    exit 1
fi

# Mise √† jour du syst√®me (sans interaction)
echo "üì¶ Mise √† jour du syst√®me..."
DEBIAN_FRONTEND=noninteractive apt update 
DEBIAN_FRONTEND=noninteractive apt upgrade -y

# Installation de nginx si n√©cessaire
if ! command -v nginx &> /dev/null; then
    echo "üì¶ Installation de Nginx..."
    DEBIAN_FRONTEND=noninteractive apt install -y nginx
fi

# Arr√™t de nginx pour √©viter les conflits
systemctl stop nginx 2>/dev/null || true

# Cr√©ation du r√©pertoire web
echo "üìÅ Cr√©ation du r√©pertoire web..."
mkdir -p $WEBROOT
mkdir -p $WEBROOT/releases
chown -R $USER:$USER $WEBROOT
chmod -R 755 $WEBROOT

# Cr√©ation de la structure de dossiers
echo "üìÅ Cr√©ation de la structure des dossiers..."
touch $WEBROOT/latest.yml
touch $WEBROOT/latest-mac.yml  
touch $WEBROOT/latest-linux.yml

# Configuration Nginx HTTP simple (SYNTAXE CORRIG√âE)
echo "‚öôÔ∏è  Configuration de Nginx (HTTP sur port $PORT)..."
cat > $NGINX_CONF << 'EOF'
# Configuration Nginx pour Karlog Updates - Port 3001 HTTP
server {
    listen 3001;
    server_name _;
    
    # Document root
    root /var/www/karlog-updates;
    index index.html;
    
    # Logs
    access_log /var/log/nginx/karlog-updates-access.log;
    error_log /var/log/nginx/karlog-updates-error.log;
    
    # Headers de base
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    
    # Configuration CORS pour l'application Electron
    add_header Access-Control-Allow-Origin "*";
    add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
    add_header Access-Control-Allow-Headers "Range";
    
    # Cache pour les fichiers de mise √† jour
    location ~* \.(exe|dmg|AppImage|deb|snap)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Accept-Ranges bytes;
        
        # Logs sp√©ciaux pour les t√©l√©chargements
        access_log /var/log/nginx/downloads.log;
    }
    
    # Configuration pour les fichiers de m√©tadonn√©es (.yml)
    location ~* \.(yml|yaml)$ {
        expires 5m;
        add_header Cache-Control "public, must-revalidate";
        add_header Content-Type "text/yaml";
    }
    
    # Health check avec contenu statique
    location = /health {
        access_log off;
        return 200 "OK - Karlog Update Server\nServer: 91.108.122.35:3001\nStatus: Active\n";
        add_header Content-Type text/plain;
    }
    
    # Status endpoint
    location = /status {
        access_log off;
        return 200 "Karlog Update Server\nIP: 91.108.122.35\nPort: 3001\nStatus: Online\n";
        add_header Content-Type text/plain;
    }
    
    # Protection contre les acc√®s ind√©sirables
    location ~ /\. {
        deny all;
    }
    
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        return 204;
    }
    
    # Page d'index avec fallback
    location = / {
        try_files $uri /index.html @fallback;
    }
    
    location @fallback {
        return 200 "Karlog Update Server\nStatus: Active\nEndpoints:\n  /health - Health check\n  /latest.yml - Windows metadata\n  /latest-mac.yml - macOS metadata\n  /latest-linux.yml - Linux metadata\n";
        add_header Content-Type text/plain;
    }
}
EOF

# Remplacement des variables dans le fichier de configuration
sed -i "s|3001|$PORT|g" $NGINX_CONF
sed -i "s|/var/www/karlog-updates|$WEBROOT|g" $NGINX_CONF
sed -i "s|91.108.122.35|$SERVER_IP|g" $NGINX_CONF

# Suppression du site par d√©faut
rm -f /etc/nginx/sites-enabled/default

# Activation du nouveau site
ln -sf $NGINX_CONF /etc/nginx/sites-enabled/karlog-updates

# Test de la configuration Nginx
echo "üîç Test de la configuration Nginx..."
nginx -t

if [ $? -ne 0 ]; then
    echo "‚ùå Erreur dans la configuration Nginx !"
    echo "Contenu du fichier de configuration :"
    cat $NGINX_CONF
    exit 1
fi

# D√©marrage de Nginx
echo "üîÑ D√©marrage de Nginx..."
systemctl enable nginx
systemctl start nginx

# V√©rification que nginx √©coute sur le bon port
sleep 2
if ! netstat -tuln | grep -q ":$PORT "; then
    echo "‚ùå Nginx ne semble pas √©couter sur le port $PORT"
    systemctl status nginx
    exit 1
fi

# Configuration du pare-feu
echo "üî• Configuration du pare-feu..."
ufw allow $PORT/tcp comment "Karlog Updates"
ufw allow ssh
ufw --force enable 2>/dev/null || echo "UFW d√©j√† activ√©"

# Cr√©ation d'un script de nettoyage automatique
echo "üßπ Cr√©ation du script de nettoyage..."
cat > $WEBROOT/cleanup.sh << 'EOF'
#!/bin/bash
# Nettoyage automatique - garde seulement les 5 derni√®res versions
cd /var/www/karlog-updates/releases 2>/dev/null || exit 1
if [ "$(ls -1 | wc -l)" -gt 5 ]; then
    ls -1dt */ | tail -n +6 | xargs rm -rf
    echo "$(date): Nettoyage effectu√© - gard√© les 5 derni√®res versions" >> /var/log/karlog-cleanup.log
fi
EOF

chmod +x $WEBROOT/cleanup.sh

# Ajout de la t√¢che cron pour le nettoyage (tous les dimanches √† 2h)
echo "‚è∞ Configuration du nettoyage automatique..."
(crontab -l 2>/dev/null | grep -v karlog-cleanup; echo "0 2 * * 0 $WEBROOT/cleanup.sh") | crontab -

# Cr√©ation d'une page de statut HTML (sans variables dynamiques)
cat > $WEBROOT/index.html << EOF
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Karlog Update Server</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', system-ui, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #333;
        }
        .container { 
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            max-width: 600px;
            width: 90%;
            text-align: center;
        }
        .status { 
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        h1 { 
            color: #333;
            margin-bottom: 1rem;
            font-size: 2rem;
        }
        .info {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 8px;
            margin: 1rem 0;
            text-align: left;
        }
        .endpoint {
            background: #e9ecef;
            padding: 0.8rem;
            border-radius: 5px;
            font-family: monospace;
            margin: 0.5rem 0;
            word-break: break-all;
        }
        .grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin: 1rem 0;
        }
        .card {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #28a745;
        }
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 5px;
            cursor: pointer;
            margin: 0.5rem;
            transition: background 0.3s;
        }
        .btn:hover { background: #5a67d8; }
        #result { 
            margin-top: 1rem; 
            padding: 1rem; 
            border-radius: 5px; 
            font-family: monospace;
            font-size: 0.9rem;
        }
        .success { background: #d4edda; color: #155724; }
        .error { background: #f8d7da; color: #721c24; }
    </style>
</head>
<body>
    <div class="container">
        <div class="status">üöÄ</div>
        <h1>Karlog Update Server</h1>
        <p style="color: #28a745; font-weight: bold; font-size: 1.2rem;">‚úÖ Serveur op√©rationnel</p>
        
        <div class="info">
            <h3>üì° Configuration</h3>
            <div class="grid">
                <div class="card">
                    <strong>Serveur</strong><br>
                    $SERVER_IP
                </div>
                <div class="card">
                    <strong>Port</strong><br>
                    $PORT
                </div>
            </div>
            <div class="endpoint">http://$SERVER_IP:$PORT</div>
        </div>

        <div class="info">
            <h3>üîó Endpoints disponibles</h3>
            <div class="endpoint">/health - Status du serveur</div>
            <div class="endpoint">/status - Informations serveur</div>
            <div class="endpoint">/latest.yml - M√©tadonn√©es Windows</div>
            <div class="endpoint">/latest-mac.yml - M√©tadonn√©es macOS</div>
            <div class="endpoint">/latest-linux.yml - M√©tadonn√©es Linux</div>
        </div>

        <div class="info">
            <h3>üß™ Test de connectivit√©</h3>
            <button class="btn" onclick="testHealth()">Tester /health</button>
            <button class="btn" onclick="testStatus()">Tester /status</button>
            <div id="result"></div>
        </div>

        <div class="info">
            <p><strong>‚è∞ Page charg√©e:</strong> <span id="time"></span></p>
            <p><strong>üîß Configuration:</strong> HTTP simple, Port $PORT</p>
            <p><strong>üõ°Ô∏è S√©curit√©:</strong> CORS activ√© pour Electron</p>
        </div>
    </div>

    <script>
        document.getElementById('time').textContent = new Date().toLocaleString('fr-FR');
        
        async function testEndpoint(path, name) {
            const result = document.getElementById('result');
            result.innerHTML = '‚è≥ Test en cours...';
            result.className = '';
            
            try {
                const response = await fetch(path);
                const text = await response.text();
                result.innerHTML = \`‚úÖ <strong>\${name}</strong> OK (HTTP \${response.status})<br><pre>\${text.substring(0, 200)}\</pre>\`;
                result.className = 'success';
            } catch (error) {
                result.innerHTML = \`‚ùå <strong>\${name}</strong> ERREUR<br>\${error.message}\`;
                result.className = 'error';
            }
        }
        
        function testHealth() {
            testEndpoint('/health', 'Health Check');
        }
        
        function testStatus() {
            testEndpoint('/status', 'Status');
        }
        
        // Test automatique au chargement
        setTimeout(testHealth, 1000);
    </script>
</body>
</html>
EOF

# Script de monitoring
cat > /usr/local/bin/karlog-status << EOF
#!/bin/bash
echo "üîç Status Karlog Update Server"
echo "=============================="
echo "üìÖ Date: \$(date)"
echo "üåê IP: $SERVER_IP"
echo "üö™ Port: $PORT"
echo "üìÅ Dossier: $WEBROOT"
echo ""
echo "üîß Status Nginx:"
systemctl is-active nginx
echo ""
echo "üîå Port d'√©coute:"
netstat -tuln | grep $PORT || echo "Port $PORT non trouv√©"
echo ""
echo "üìä Espace disque:"
df -h $WEBROOT
echo ""
echo "üìà Derni√®res connexions:"
tail -5 /var/log/nginx/karlog-updates-access.log 2>/dev/null || echo "Pas de logs encore"
echo ""
echo "üß™ Test rapide:"
curl -s "http://localhost:$PORT/health" || echo "‚ùå Serveur non accessible"
EOF

chmod +x /usr/local/bin/karlog-status

# Test final complet
echo ""
echo "üß™ Tests finaux..."

# Test nginx
if ! systemctl is-active --quiet nginx; then
    echo "‚ùå Nginx n'est pas actif"
    systemctl status nginx
    exit 1
fi

# Test du port
if ! netstat -tuln | grep -q ":$PORT "; then
    echo "‚ùå Le port $PORT n'est pas ouvert"
    netstat -tuln | grep LISTEN
    exit 1
fi

# Test HTTP
sleep 3
if curl -f -s "http://localhost:$PORT/health" > /dev/null; then
    echo "‚úÖ Test HTTP r√©ussi"
else
    echo "‚ùå Test HTTP √©chou√©"
    echo "V√©rification des logs nginx:"
    tail -10 /var/log/nginx/error.log
    exit 1
fi

# R√©sum√© final
echo ""
echo "üéâ =================================="
echo "‚úÖ INSTALLATION R√âUSSIE !"
echo "üéâ =================================="
echo ""
echo "üìã Configuration :"
echo "   ‚Ä¢ Serveur: $SERVER_IP"
echo "   ‚Ä¢ Port: $PORT"
echo "   ‚Ä¢ URL: http://$SERVER_IP:$PORT"
echo "   ‚Ä¢ Protocole: HTTP (syntaxe nginx corrig√©e)"
echo ""
echo "üîó URLs importantes :"
echo "   ‚Ä¢ Interface web: http://$SERVER_IP:$PORT"
echo "   ‚Ä¢ Health check: http://$SERVER_IP:$PORT/health"
echo "   ‚Ä¢ Status serveur: karlog-status"
echo ""
echo "‚ö†Ô∏è  √Ä FAIRE MAINTENANT :"
echo "   1. Testez: curl http://$SERVER_IP:$PORT/health"
echo "   2. Interface web: http://$SERVER_IP:$PORT"
echo "   3. Red√©marrez si demand√© par le syst√®me"
echo ""
echo "üîß Commandes utiles :"
echo "   ‚Ä¢ karlog-status - Status complet"
echo "   ‚Ä¢ systemctl status nginx - Status nginx"
echo "   ‚Ä¢ tail -f /var/log/nginx/karlog-updates-access.log - Logs"
echo ""

# Affichage du statut final
karlog-status

echo ""
echo "üöÄ Serveur pr√™t √† recevoir les d√©ploiements !"
echo "‚úÖ Syntaxe nginx corrig√©e - Plus d'erreurs de configuration !"